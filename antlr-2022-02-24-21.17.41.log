2022-02-24 21:17:40:705 grammar LogManager.java:25 before: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}) (ALT P_WHILE PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT ID { 
      $p = expresion.NewCallVariable($ID.text)})))))
2022-02-24 21:17:40:721 grammar LogManager.java:25 after: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}) (ALT P_WHILE PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT ID { 
      $p = expresion.NewCallVariable($ID.text)})))))
2022-02-24 21:17:40:842 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} primitivo<tokenIndex=245> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=251> expression<tokenIndex=253> PARDER<tokenIndex=255> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=('*'<tokenIndex=178>|'/'<tokenIndex=180>) opDe = expr_arit<tokenIndex=187,p=6> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('+'<tokenIndex=202>|'-'<tokenIndex=204>) opDe = expr_arit<tokenIndex=211,p=5> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> op=('<'<tokenIndex=226>|'<='<tokenIndex=228>|'>='<tokenIndex=230>|'>'<tokenIndex=232>) opDe = expr_arit<tokenIndex=239,p=4> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
        )*
    ;
2022-02-24 21:17:40:846 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (primitivo (ELEMENT_OPTIONS (= tokenIndex 245))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 251))) (expression (ELEMENT_OPTIONS (= tokenIndex 253))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 255))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 178))) ('/' (ELEMENT_OPTIONS (= tokenIndex 180))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 187) (= p 6)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 202))) ('-' (ELEMENT_OPTIONS (= tokenIndex 204))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 211) (= p 5)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 226))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 228))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 230))) ('>' (ELEMENT_OPTIONS (= tokenIndex 232))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 239) (= p 4)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}))))))
2022-02-24 21:17:40:877 grammar LogManager.java:25 import CONSOLE=1
2022-02-24 21:17:40:877 grammar LogManager.java:25 import LOG=2
2022-02-24 21:17:40:877 grammar LogManager.java:25 import P_NUMBER=3
2022-02-24 21:17:40:877 grammar LogManager.java:25 import P_STRING=4
2022-02-24 21:17:40:877 grammar LogManager.java:25 import P_IF=5
2022-02-24 21:17:40:877 grammar LogManager.java:25 import P_WHILE=6
2022-02-24 21:17:40:877 grammar LogManager.java:25 import NUMBER=7
2022-02-24 21:17:40:877 grammar LogManager.java:25 import STRING=8
2022-02-24 21:17:40:877 grammar LogManager.java:25 import ID=9
2022-02-24 21:17:40:877 grammar LogManager.java:25 import PUNTO=10
2022-02-24 21:17:40:877 grammar LogManager.java:25 import PTCOMA=11
2022-02-24 21:17:40:877 grammar LogManager.java:25 import DIFERENTE=12
2022-02-24 21:17:40:877 grammar LogManager.java:25 import IGUAL=13
2022-02-24 21:17:40:877 grammar LogManager.java:25 import MAYORIGUAL=14
2022-02-24 21:17:40:877 grammar LogManager.java:25 import MENORIGUAL=15
2022-02-24 21:17:40:877 grammar LogManager.java:25 import MAYOR=16
2022-02-24 21:17:40:877 grammar LogManager.java:25 import MENOR=17
2022-02-24 21:17:40:877 grammar LogManager.java:25 import MUL=18
2022-02-24 21:17:40:877 grammar LogManager.java:25 import DIV=19
2022-02-24 21:17:40:877 grammar LogManager.java:25 import ADD=20
2022-02-24 21:17:40:877 grammar LogManager.java:25 import SUB=21
2022-02-24 21:17:40:877 grammar LogManager.java:25 import PARIZQ=22
2022-02-24 21:17:40:877 grammar LogManager.java:25 import PARDER=23
2022-02-24 21:17:40:877 grammar LogManager.java:25 import LLAVEIZQ=24
2022-02-24 21:17:40:877 grammar LogManager.java:25 import LLAVEDER=25
2022-02-24 21:17:40:877 grammar LogManager.java:25 import WHITESPACE=26
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'console'=1
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'log'=2
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'number'=3
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'string'=4
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'if'=5
2022-02-24 21:17:40:877 grammar LogManager.java:25 import 'while'=6
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '.'=10
2022-02-24 21:17:40:877 grammar LogManager.java:25 import ';'=11
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '!'=12
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '='=13
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '>='=14
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '<='=15
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '>'=16
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '<'=17
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '*'=18
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '/'=19
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '+'=20
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '-'=21
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '('=22
2022-02-24 21:17:40:877 grammar LogManager.java:25 import ')'=23
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '{'=24
2022-02-24 21:17:40:877 grammar LogManager.java:25 import '}'=25
2022-02-24 21:17:40:893 grammar LogManager.java:25 tokens={CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_WHILE=6, NUMBER=7, STRING=8, ID=9, PUNTO=10, PTCOMA=11, DIFERENTE=12, IGUAL=13, MAYORIGUAL=14, MENORIGUAL=15, MAYOR=16, MENOR=17, MUL=18, DIV=19, ADD=20, SUB=21, PARIZQ=22, PARDER=23, LLAVEIZQ=24, LLAVEDER=25, WHITESPACE=26, 'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, 'while'=6, '.'=10, ';'=11, '!'=12, '='=13, '>='=14, '<='=15, '>'=16, '<'=17, '*'=18, '/'=19, '+'=20, '-'=21, '('=22, ')'=23, '{'=24, '}'=25}
2022-02-24 21:17:40:893 semantics LogManager.java:25 tokens={EOF=-1, CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_WHILE=6, NUMBER=7, STRING=8, ID=9, PUNTO=10, PTCOMA=11, DIFERENTE=12, IGUAL=13, MAYORIGUAL=14, MENORIGUAL=15, MAYOR=16, MENOR=17, MUL=18, DIV=19, ADD=20, SUB=21, PARIZQ=22, PARDER=23, LLAVEIZQ=24, LLAVEDER=25, WHITESPACE=26}
2022-02-24 21:17:40:893 semantics LogManager.java:25 strings={'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, 'while'=6, '.'=10, ';'=11, '!'=12, '='=13, '>='=14, '<='=15, '>'=16, '<'=17, '*'=18, '/'=19, '+'=20, '-'=21, '('=22, ')'=23, '{'=24, '}'=25}
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[{1, 3, 5..6, 9}, {<EOF>, 25}]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? true
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[1, 3, 9, 5, 6]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? true
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 2 in rule expr_arit
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[{7..9}, 22]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? true
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 3 in rule expr_arit
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[null, null, null]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? false
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 4 in rule expr_arit
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[null, null]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? false
2022-02-24 21:17:40:924 LL1 LogManager.java:25 
DECISION 5 in rule primitivo
2022-02-24 21:17:40:924 LL1 LogManager.java:25 look=[7, 8, 9]
2022-02-24 21:17:40:924 LL1 LogManager.java:25 LL(1)? true
2022-02-24 21:17:40:940 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-24 21:17:41:023 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-02-24 21:17:41:023 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,17:19]
2022-02-24 21:17:41:024 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,17:28].[@-1,24:24='l',<0>,17:42]
2022-02-24 21:17:41:025 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-02-24 21:17:41:025 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,22:5]
2022-02-24 21:17:41:026 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-02-24 21:17:41:027 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,27:13]
2022-02-24 21:17:41:028 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p)
2022-02-24 21:17:41:028 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,34:50]
2022-02-24 21:17:41:029 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,34:83].[@-1,45:45='p',<0>,34:94]
2022-02-24 21:17:41:029 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)
2022-02-24 21:17:41:029 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:38]
2022-02-24 21:17:41:029 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,35:74].[@-1,40:43='text',<0>,35:77]
2022-02-24 21:17:41:030 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,35:102].[@-1,76:76='p',<0>,35:113]
2022-02-24 21:17:41:030 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p)
2022-02-24 21:17:41:030 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:29]
2022-02-24 21:17:41:030 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,36:64].[@-1,39:42='text',<0>,36:67]
2022-02-24 21:17:41:030 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,36:73].[@-1,56:56='p',<0>,36:84]
2022-02-24 21:17:41:031 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l)
2022-02-24 21:17:41:031 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,37:68]
2022-02-24 21:17:41:031 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,37:95].[@-1,39:39='p',<0>,37:106]
2022-02-24 21:17:41:031 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,37:110].[@-1,57:57='l',<0>,37:124]
2022-02-24 21:17:41:031 action-translator LogManager.java:25 translate $instr = instruction.NewWhile($expression.p, $instrucciones.l)
2022-02-24 21:17:41:031 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,38:71]
2022-02-24 21:17:41:032 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,38:101].[@-1,42:42='p',<0>,38:112]
2022-02-24 21:17:41:032 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,38:116].[@-1,60:60='l',<0>,38:130]
2022-02-24 21:17:41:033 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-02-24 21:17:41:033 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,42:20]
2022-02-24 21:17:41:033 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,42:25].[@-1,16:16='p',<0>,42:35]
2022-02-24 21:17:41:035 action-translator LogManager.java:25 translate 
2022-02-24 21:17:41:035 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-02-24 21:17:41:035 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:40]
2022-02-24 21:17:41:035 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,2:45].[@-1,16:16='p',<0>,2:55]
2022-02-24 21:17:41:036 action-translator LogManager.java:25 translate $p = $expression.p
2022-02-24 21:17:41:036 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:84]
2022-02-24 21:17:41:036 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,3:89].[@-1,17:17='p',<0>,3:100]
2022-02-24 21:17:41:037 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-02-24 21:17:41:037 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-24 21:17:41:037 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:141]
2022-02-24 21:17:41:037 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,6:169].[@-1,34:34='p',<0>,6:174]
2022-02-24 21:17:41:037 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,6:177].[@-1,40:43='text',<0>,6:180]
2022-02-24 21:17:41:037 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,6:186].[@-1,51:51='p',<0>,6:191]
2022-02-24 21:17:41:038 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-24 21:17:41:038 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-24 21:17:41:038 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:151]
2022-02-24 21:17:41:038 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,7:179].[@-1,34:34='p',<0>,7:184]
2022-02-24 21:17:41:038 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,7:187].[@-1,40:43='text',<0>,7:190]
2022-02-24 21:17:41:038 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,7:196].[@-1,51:51='p',<0>,7:201]
2022-02-24 21:17:41:038 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-24 21:17:41:039 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-24 21:17:41:039 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:193]
2022-02-24 21:17:41:039 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,8:221].[@-1,34:34='p',<0>,8:226]
2022-02-24 21:17:41:039 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,8:229].[@-1,40:43='text',<0>,8:232]
2022-02-24 21:17:41:039 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,8:238].[@-1,51:51='p',<0>,8:243]
2022-02-24 21:17:41:040 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-02-24 21:17:41:040 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-24 21:17:41:041 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-24 21:17:41:041 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-02-24 21:17:41:041 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,55:38].[@-1,47:50='text',<0>,55:45]
2022-02-24 21:17:41:041 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,59:13]
2022-02-24 21:17:41:042 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-02-24 21:17:41:042 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,62:13].[@-1,23:26='text',<0>,62:20]
2022-02-24 21:17:41:042 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,62:32].[@-1,42:45='text',<0>,62:39]
2022-02-24 21:17:41:042 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,63:7]
2022-02-24 21:17:41:042 action-translator LogManager.java:25 translate  
      $p = expresion.NewCallVariable($ID.text)
2022-02-24 21:17:41:042 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,65:7]
2022-02-24 21:17:41:042 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,65:38].[@-1,44:47='text',<0>,65:41]
2022-02-24 21:17:41:679 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-24 21:17:41:679 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-24 21:17:41:774 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-24 21:17:41:774 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

