2022-02-17 22:36:09:744 grammar LogManager.java:25 before: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT ID { 
      $p = expresion.NewCallVariable($ID.text)})))))
2022-02-17 22:36:09:753 grammar LogManager.java:25 after: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT ID { 
      $p = expresion.NewCallVariable($ID.text)})))))
2022-02-17 22:36:09:866 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} primitivo<tokenIndex=214> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=220> expression<tokenIndex=222> PARDER<tokenIndex=224> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=('*'<tokenIndex=147>|'/'<tokenIndex=149>) opDe = expr_arit<tokenIndex=156,p=6> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('+'<tokenIndex=171>|'-'<tokenIndex=173>) opDe = expr_arit<tokenIndex=180,p=5> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> op=('<'<tokenIndex=195>|'<='<tokenIndex=197>|'>='<tokenIndex=199>|'>'<tokenIndex=201>) opDe = expr_arit<tokenIndex=208,p=4> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
        )*
    ;
2022-02-17 22:36:09:866 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (primitivo (ELEMENT_OPTIONS (= tokenIndex 214))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 220))) (expression (ELEMENT_OPTIONS (= tokenIndex 222))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 224))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 147))) ('/' (ELEMENT_OPTIONS (= tokenIndex 149))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 156) (= p 6)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 171))) ('-' (ELEMENT_OPTIONS (= tokenIndex 173))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 180) (= p 5)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 195))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 197))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 199))) ('>' (ELEMENT_OPTIONS (= tokenIndex 201))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 208) (= p 4)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}))))))
2022-02-17 22:36:09:882 grammar LogManager.java:25 import CONSOLE=1
2022-02-17 22:36:09:882 grammar LogManager.java:25 import LOG=2
2022-02-17 22:36:09:882 grammar LogManager.java:25 import P_NUMBER=3
2022-02-17 22:36:09:882 grammar LogManager.java:25 import P_STRING=4
2022-02-17 22:36:09:882 grammar LogManager.java:25 import P_IF=5
2022-02-17 22:36:09:882 grammar LogManager.java:25 import NUMBER=6
2022-02-17 22:36:09:882 grammar LogManager.java:25 import STRING=7
2022-02-17 22:36:09:882 grammar LogManager.java:25 import ID=8
2022-02-17 22:36:09:882 grammar LogManager.java:25 import PUNTO=9
2022-02-17 22:36:09:882 grammar LogManager.java:25 import PTCOMA=10
2022-02-17 22:36:09:882 grammar LogManager.java:25 import DIFERENTE=11
2022-02-17 22:36:09:882 grammar LogManager.java:25 import IGUAL=12
2022-02-17 22:36:09:882 grammar LogManager.java:25 import MAYORIGUAL=13
2022-02-17 22:36:09:882 grammar LogManager.java:25 import MENORIGUAL=14
2022-02-17 22:36:09:882 grammar LogManager.java:25 import MAYOR=15
2022-02-17 22:36:09:882 grammar LogManager.java:25 import MENOR=16
2022-02-17 22:36:09:882 grammar LogManager.java:25 import MUL=17
2022-02-17 22:36:09:882 grammar LogManager.java:25 import DIV=18
2022-02-17 22:36:09:882 grammar LogManager.java:25 import ADD=19
2022-02-17 22:36:09:882 grammar LogManager.java:25 import SUB=20
2022-02-17 22:36:09:882 grammar LogManager.java:25 import PARIZQ=21
2022-02-17 22:36:09:882 grammar LogManager.java:25 import PARDER=22
2022-02-17 22:36:09:882 grammar LogManager.java:25 import LLAVEIZQ=23
2022-02-17 22:36:09:882 grammar LogManager.java:25 import LLAVEDER=24
2022-02-17 22:36:09:882 grammar LogManager.java:25 import WHITESPACE=25
2022-02-17 22:36:09:882 grammar LogManager.java:25 import 'console'=1
2022-02-17 22:36:09:882 grammar LogManager.java:25 import 'log'=2
2022-02-17 22:36:09:882 grammar LogManager.java:25 import 'number'=3
2022-02-17 22:36:09:882 grammar LogManager.java:25 import 'string'=4
2022-02-17 22:36:09:882 grammar LogManager.java:25 import 'if'=5
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '.'=9
2022-02-17 22:36:09:882 grammar LogManager.java:25 import ';'=10
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '!'=11
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '='=12
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '>='=13
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '<='=14
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '>'=15
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '<'=16
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '*'=17
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '/'=18
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '+'=19
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '-'=20
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '('=21
2022-02-17 22:36:09:882 grammar LogManager.java:25 import ')'=22
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '{'=23
2022-02-17 22:36:09:882 grammar LogManager.java:25 import '}'=24
2022-02-17 22:36:09:882 grammar LogManager.java:25 tokens={CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, NUMBER=6, STRING=7, ID=8, PUNTO=9, PTCOMA=10, DIFERENTE=11, IGUAL=12, MAYORIGUAL=13, MENORIGUAL=14, MAYOR=15, MENOR=16, MUL=17, DIV=18, ADD=19, SUB=20, PARIZQ=21, PARDER=22, LLAVEIZQ=23, LLAVEDER=24, WHITESPACE=25, 'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, '.'=9, ';'=10, '!'=11, '='=12, '>='=13, '<='=14, '>'=15, '<'=16, '*'=17, '/'=18, '+'=19, '-'=20, '('=21, ')'=22, '{'=23, '}'=24}
2022-02-17 22:36:09:882 semantics LogManager.java:25 tokens={EOF=-1, CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, NUMBER=6, STRING=7, ID=8, PUNTO=9, PTCOMA=10, DIFERENTE=11, IGUAL=12, MAYORIGUAL=13, MENORIGUAL=14, MAYOR=15, MENOR=16, MUL=17, DIV=18, ADD=19, SUB=20, PARIZQ=21, PARDER=22, LLAVEIZQ=23, LLAVEDER=24, WHITESPACE=25}
2022-02-17 22:36:09:882 semantics LogManager.java:25 strings={'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, '.'=9, ';'=10, '!'=11, '='=12, '>='=13, '<='=14, '>'=15, '<'=16, '*'=17, '/'=18, '+'=19, '-'=20, '('=21, ')'=22, '{'=23, '}'=24}
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[{1, 3, 5}, {<EOF>, 24}]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? true
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[1, 3, 5]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? true
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 2 in rule expr_arit
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[{6..8}, 21]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? true
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 3 in rule expr_arit
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[null, null, null]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? false
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 4 in rule expr_arit
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[null, null]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? false
2022-02-17 22:36:09:914 LL1 LogManager.java:25 
DECISION 5 in rule primitivo
2022-02-17 22:36:09:914 LL1 LogManager.java:25 look=[6, 7, 8]
2022-02-17 22:36:09:914 LL1 LogManager.java:25 LL(1)? true
2022-02-17 22:36:09:914 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,17:19]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,17:28].[@-1,24:24='l',<0>,17:42]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,22:5]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,27:13]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p)
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,34:50]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,34:83].[@-1,45:45='p',<0>,34:94]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p)
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:38]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,35:74].[@-1,40:43='text',<0>,35:77]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,35:102].[@-1,76:76='p',<0>,35:113]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l)
2022-02-17 22:36:09:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:68]
2022-02-17 22:36:09:961 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,36:95].[@-1,39:39='p',<0>,36:106]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,36:110].[@-1,57:57='l',<0>,36:124]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,40:20]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,40:25].[@-1,16:16='p',<0>,40:35]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate 
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:40]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,2:45].[@-1,16:16='p',<0>,2:55]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = $expression.p
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:84]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,3:89].[@-1,17:17='p',<0>,3:100]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:141]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,6:169].[@-1,34:34='p',<0>,6:174]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,6:177].[@-1,40:43='text',<0>,6:180]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,6:186].[@-1,51:51='p',<0>,6:191]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:151]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,7:179].[@-1,34:34='p',<0>,7:184]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,7:187].[@-1,40:43='text',<0>,7:190]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,7:196].[@-1,51:51='p',<0>,7:201]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:193]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,8:221].[@-1,34:34='p',<0>,8:226]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,8:229].[@-1,40:43='text',<0>,8:232]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,8:238].[@-1,51:51='p',<0>,8:243]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,53:38].[@-1,47:50='text',<0>,53:45]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,57:13]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,60:13].[@-1,23:26='text',<0>,60:20]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,60:32].[@-1,42:45='text',<0>,60:39]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,61:7]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 translate  
      $p = expresion.NewCallVariable($ID.text)
2022-02-17 22:36:09:977 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,63:7]
2022-02-17 22:36:09:977 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,63:38].[@-1,44:47='text',<0>,63:41]
2022-02-17 22:36:10:218 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-17 22:36:10:218 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-17 22:36:10:302 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-02-17 22:36:10:302 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

